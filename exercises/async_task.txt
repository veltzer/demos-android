phase one - basic AsyncTask usage
=================================
Show a TextView on the screen.
Read a number from that text view.
Have an "execute" button which launches an AsyncTask
	which calculates the sum of squares up to that number
	(or just sleep for 5 seconds and invent some result...:)
When the async task starts, deactivate the "execute" button.
When the async finishes, show the result in a different
	read only, text view and re-activate the "execute" button.

page 188 in your material shows the use of AsyncTask.

phase two - add progress reporting
==================================
- add a progress bar to the GUI.
- add a onProgressUpdate method to AsyncTask.
- call 'publishProgress' in your computation.
- see that the progress bar updates nicely.
(The progress bar needs "horizontal" style to have a look
and feel of a progress bar).

Advanced questions:
===================
- what if the code for the background task is not yours
and you cannot sprinkle 'publishProgress' calls in it?
- what if the code for the background task is yours
but it is hard to uniformly sprinkle 'publishProgress' calls in it?

phase three - add stop capability
=================================
- add a stop button which is disabled by default.
- when an AsyncTask is launched enabled the stop button.
- when an AsyncTask finishes disable the stop button.
- when the button is pressed (and AsyncTask is running, ofcourse)
	the AsyncTasks life is cut short.

Do this using:
	- boolean volatile member.
	- use AsyncTasks cancel facility.
		- with Interrupted=False
		- with Interrupted=True
	- other means? (this is a big discussion).
